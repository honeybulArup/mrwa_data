# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
getwd()
list.files9)
list.files()
df = read.csv("data/master/master.csv")
colnames(df)
head(df)
df = read.csv("data/master/master.csv")
colnames(df)
df = read.csv("data/master/master.csv")
colnames(df)
df = read.csv("data/master_files/master.csv")
colnames(df)
print(df$Route)
df = read.csv("data/master_files/master.csv")
colnames(df)
print(df$Route)
df = read.csv("data/master_files/master.csv")
colnames(df)
print(df$Route)
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
df$SpeedPerc1
speed1 = df$SpeedPerc1
float(speed1)
as.numeric(speed1)
as.numeric(as.character(speed1))
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
density(speed1)
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
density(speed1, na.rm = T)
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
d <- density(speed1, na.rm = T)
plot(d)
polygon(d, col='red', border='blue')
df = read.csv("data/master_files/master.csv")
colnames(df)
speed1 = as.numeric(as.character(df$SpeedPerc1))
d <- density(speed1, na.rm = T)
plot(d, main(
))
polygon(d, col='red', border='blue')
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
d <- density(speed1, na.rm = T)
plot(d, main="Density Plot of Speed Percentage")
polygon(d, col='red', border='blue')
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
d <- density(speed1, na.rm = T)
plot(d, main="Density Plot of Speed Percentage")
polygon(d, col='red', border='blue')
abline(h=0.5)
df = read.csv("data/master_files/master.csv")
colnames(df)
# print(df$Route)
speed1 = as.numeric(as.character(df$SpeedPerc1))
d <- density(speed1, na.rm = T)
plot(d, main="Density Plot of Speed Percentage")
polygon(d, col='red', border='blue')
abline(v=0.5)
head(df)
data = read.csv("data/master_files/data.csv")
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data = read.csv("data/master_files/data.csv")
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value)]
print(orderedData)
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data = read.csv("data/master_files/data.csv")
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value),]
print(orderedData)
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data = read.csv("data/master_files/data.csv")
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value),]
orderedData = orderedData[-which(is.na(orderedData$Section.Value)),]
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data = read.csv("data/master_files/data.csv")
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value),]
orderedData = orderedData[-which(is.na(orderedData$Section.Value)),]
print(orderedData)
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
?order
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data = read.csv("data/master_files/data.csv")
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value, decreasing = T),]
orderedData = orderedData[-which(is.na(orderedData$Section.Value)),]
print(orderedData)
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('data/mrwa_data_viz')
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
data = read.csv("data/master_files/data.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
selectInput('routeSelect', label=NULL, choice=data$Route)
plotOutput('sectionVal'),A
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value, decreasing = T),]
orderedData = orderedData[-which(is.na(orderedData$Section.Value)),]
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
library(shiny)
setwd("C://Users/Robert.Honeybul/Desktop/mrwa_data/")
data = read.csv("data/master_files/data.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
HTML("<center><h4>Route Analysis</h4></center>"),
HTML("<center>"),
selectInput('routeSelect', label="Route", data$Route, width='400'),
HTML("</center>"),
plotOutput('sectionVal'),
plotOutput('journeyPlot'),
plotOutput('amSpeed'),
plotOutput('pmSpeed'),
plotOutput('npi')
)
# Define server logic required to draw a histogram
server <- function(input, output) {
react <- reactive({
print(input$routeSelect)
})
jt_rel = data$JT_Normal
spd_am = data$Speed_am_Normal
spd_pm = data$Speed_pm_Normal
npi = data$NPI_Normal
secVal = data$Section.Value
jt_d <- density(jt_rel, na.rm=T)
spd_am_d <- density(spd_am, na.rm=T)
spd_pm_d <- density(spd_pm, na.rm=T)
npi_d <- density(npi, na.rm=T)
sec_d <- density(secVal, na.rm=T)
index = 50
vals = data[index,]
orderedData = data[order(data$Section.Value, decreasing = T),]
orderedData = orderedData[-which(is.na(orderedData$Section.Value)),]
output$sectionVal <- renderPlot({
plot(sec_d, main="Section Value")
polygon(sec_d, col="red")
abline(v=vals$Section.Value)
})
output$amSpeed <- renderPlot({
plot(spd_am_d, main="Speed % Morning")
polygon(spd_am_d, col="red")
abline(v=vals$Speed_am_Normal)
})
output$pmSpeed <- renderPlot({
plot(spd_pm_d, main="Speed % Afternoon")
polygon(spd_pm_d, col="red")
abline(v=vals$Speed_pm_Normal)
})
output$npi <- renderPlot({
plot(npi_d, main="NPI")
polygon(npi_d, col="red")
abline(v=vals$NPI_Normal)
})
output$journeyPlot <- renderPlot({
plot(jt_d, main="Journey Reliability")
polygon(jt_d, col="red")
abline(v=vals$JT_Normal)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
data
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
runApp('data/mrwa_data_viz')
